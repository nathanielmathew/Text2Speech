var polyfills = {
    speechUtteranceChunker: function(e, a, n) {
        a = a || {};
        var t, i = a && void 0 !== a.offset ? e.text.substring(a.offset) : e.text;
        if (e.voice && "native" === e.voice.voiceURI)
            t = e,
            t.text = i,
            t.addEventListener("end", function() {
                polyfills.speechUtteranceChunker.cancel && (polyfills.speechUtteranceChunker.cancel = !1),
                void 0 !== n && n()
            });
        else {
            var l = a && a.chunkLength || 160
              , c = new RegExp("^[\\s\\S]{" + Math.floor(l / 2) + "," + l + "}[.!?,]{1}|^[\\s\\S]{1," + l + "}$|^[\\s\\S]{1," + l + "} ")
              , o = i.match(c);
            if (void 0 === o[0] || o[0].length <= 2)
                return void (void 0 !== n && n());
            var s = o[0];
            t = new SpeechSynthesisUtterance(s);
            var r;
            for (r in e)
                e.hasOwnProperty(r) && "text" !== r && (t[r] = e[r]);
            t.addEventListener("end", function() {
                return polyfills.speechUtteranceChunker.cancel ? void (polyfills.speechUtteranceChunker.cancel = !1) : (a.offset = a.offset || 0,
                a.offset += s.length - 1,
                void polyfills.speechUtteranceChunker(e, a, n))
            })
        }
        a.modifier && a.modifier(t),
        console.log(t),
        setTimeout(function() {
            t.lang = "en-US",
            speechSynthesis.speak(t)
        }, 0)
    }
};
